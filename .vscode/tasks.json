{
    "version": "2.0.0",
    "tasks": [
        // Build tasks
        {
            "label": "build",   // 任务标签，用于在 VS Code 中识别任务
            "detail": "Build workspace (default)",  // 任务的详细描述
            "type": "shell",    // 任务类型，这里是 shell 类型，即运行 shell 命令
            "command": "./build.sh",    // 执行的命令
            "group": {  // 任务分组，有助于在 VS Code 中对任务进行分类
                "kind": "build",    // 表示这是一个构建任务
                "isDefault": true   // 设置为默认构建任务
            },
            "problemMatcher": "$gcc"    // 使用 gcc 问题匹配器，用于从输出中捕获问题
        },
        {
            "label": "debug",   // 调试任务
            "detail": "Build workspace (debug)",    // 详细描述
            "type": "shell",    // shell 类型
            "command": "./build.sh",    // 执行的命令
            "options": {    // 任务选项
                "env": {    // 环境变量
                    "BUILD_TYPE": "Debug"   // 设置 BUILD_TYPE 环境变量为 Debug
                }
            },
            "group": "build",   // 分组为构建
            "problemMatcher": "$gcc"    // 问题匹配器
        },
        // Test tasks
        {
            "label": "test",    // 测试任务
            "detail": "Run all unit tests and show results.",   // 详细描述
            "type": "shell",    // shell 类型
            "command": "./test.sh",   // 执行的命令
            "group": {  // 分组
                "kind": "test", // 测试任务
                "isDefault": true   // 默认测试任务
            }
        },
        // Clean
        {
            "label": "clean",   // 清理任务
            "detail": "Run the clean target",   // 详细描述
            "type": "shell",    // shell 类型
            "command": "colcon build --cmake-target clean",   // 执行的命令
            "problemMatcher": "$gcc"    // 问题匹配器
        },
        {
            "label": "purge",   // 清理任务
            "detail": "Purge workspace by deleting all generated files.",   // 详细描述
            "type": "shell",
            "command": "sudo rm -fr build install log; sudo py3clean .",
            "problemMatcher": []
        },
        {
            "label": "source",
            "detail": "Source workspace",
            "type": "shell",
            "command": "source /opt/ros/humble/setup.bash",
            "problemMatcher": []
        },
        // Linting and static code analysis tasks
        {
            "label": "fix",
            "detail": "Reformat files with uncrustify.",
            "type": "shell",
            "command": "ament_uncrustify --reformat src/",
            "problemMatcher": []
        },
        {
            "label": "uncrustify",
            "detail": "Lint files with uncrustify.",
            "type": "shell",
            "command": "ament_uncrustify src/",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            },
            "problemMatcher": [
                {
                    "owner": "uncrustify",
                    "source": "uncrustify",
                    "fileLocation": "relative",
                    "pattern": [
                        // just the file name message
                        {
                            "regexp": "^(.*)'(.*)':",
                            "kind": "file",
                            "file": 2,
                            "message": 1
                        }
                    ]
                }
            ]
        },
        {
            "label": "cpplint",
            "detail": "Lint files with cpplint.",
            "type": "ament",
            "task": "cpplint",
            "path": "src/",
            "problemMatcher": "$ament_cpplint",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            },
        },
        {
            "label": "cppcheck",
            "detail": "Run static code checker cppcheck.",
            "type": "ament",
            "task": "cppcheck",
            "path": "src/",
            "problemMatcher": "$ament_cppcheck",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            },
            "options": {
                "env": {
                    "AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS": "1"
                }
            }
        },
        {
            "label": "lint_cmake",
            "detail": "Run lint on cmake files.",
            "type": "ament",
            "task": "lint_cmake",
            "path": "src/",
            "problemMatcher": "$ament_lint_cmake",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            }
        },
        {
            "label": "flake8",
            "detail": "Run flake8 on python files.",
            "type": "ament",
            "task": "flake8",
            "path": "src/",
            "problemMatcher": "$ament_flake8",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            }
        },
        {
            "label": "pep257",
            "detail": "Run pep257 on python files.",
            "type": "ament",
            "task": "pep257",
            "path": "src/",
            "problemMatcher": "$ament_pep257",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            }
        },
        {
            "label": "xmllint",
            "detail": "Run xmllint on xml files.",
            "type": "ament",
            "task": "xmllint",
            "path": "src/",
            "problemMatcher": "$ament_xmllint",
            "presentation": {
                "panel": "dedicated",
                "reveal": "silent",
                "clear": true
            }
        },
        {
            "label": "lint all",
            "detail": "Run all linters.",
            "dependsOn": [
                "cppcheck",
                "cpplint",
                "flake8",
                "lint_cmake",
                "pep257",
                "xmllint",
                "uncrustify"
            ],
            "problemMatcher": []
        },
        // Workspace editing tasks
        {
            "label": "new ament_cmake package",
            "detail": "Create a new ROS cpp package from a template.",
            "type": "shell",
            "command": "ros2 pkg create --destination-directory src --build-type ament_cmake ${input:package}",
            "problemMatcher": []
        },
        {
            "label": "new ament_python package",
            "detail": "Create a new ROS python package from a template.",
            "type": "shell",
            "command": "ros2 pkg create --destination-directory src --build-type ament_python ${input:package}",
            "problemMatcher": []
        },
        {
            "label": "import from workspace file",
            "detail": "Use vcs to import modules specified by a workspace/rosinstall file.",
            "type": "shell",
            "command": "vcs import < src/ros2.repos src",
            "problemMatcher": []
        },
        {
            "label": "update workspace file",
            "detail": "Use vcs to update repositories in src to workspace file.",
            "type": "shell",
            "command": "vcs export src > src/ros2.repos",
            "problemMatcher": []
        },
        {
            "label": "install dependencies",
            "detail": "Install all dependencies specified in the workspaces package.xml files.",
            "type": "shell",
            "command": "sudo apt-get update && rosdep update && rosdep install --from-paths src --ignore-src -y",
            "problemMatcher": []
        },
        {
            "label": "setup",
            "detail": "Set up the workspace",
            "type": "shell",
            "command": "./setup.sh",
            "problemMatcher": []
        },
        {
            "label": "add submodules from .repos",
            "detail": "Create a git submodule for all repositories in your .repos file",
            "type": "shell",
            "command": "python3 .devcontainer/repos_to_submodules.py",
            "problemMatcher": []
        }
    ],
    "inputs": [
        {
            "id": "package",
            "type": "promptString",
            "description": "Package name"
        }
    ]
}
